"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportReplace = exports.reportDelete = exports.reportInsert = void 0;
const prettier_linter_helpers_1 = require("prettier-linter-helpers");
const reportInsert = (context, offset, text) => {
    const pos = context.getSourceCode().getLocFromIndex(offset);
    const range = [offset, offset];
    context.report({
        message: 'Insert `{{ code }}`',
        data: { code: prettier_linter_helpers_1.showInvisibles(text) },
        loc: { start: pos, end: pos },
        fix(fixer) {
            return fixer.insertTextAfterRange(range, text);
        },
    });
};
exports.reportInsert = reportInsert;
const reportDelete = (context, offset, text) => {
    const start = context.getSourceCode().getLocFromIndex(offset);
    const end = context.getSourceCode().getLocFromIndex(offset + text.length);
    const range = [offset, offset + text.length];
    context.report({
        message: 'Delete `{{ code }}`',
        data: { code: prettier_linter_helpers_1.showInvisibles(text) },
        loc: { start, end },
        fix(fixer) {
            return fixer.removeRange(range);
        },
    });
};
exports.reportDelete = reportDelete;
const reportReplace = (context, offset, deleteText, insertText) => {
    const start = context.getSourceCode().getLocFromIndex(offset);
    const end = context
        .getSourceCode()
        .getLocFromIndex(offset + deleteText.length);
    const range = [offset, offset + deleteText.length];
    context.report({
        message: 'Replace `{{ deleteCode }}` with `{{ insertCode }}`',
        data: {
            deleteCode: prettier_linter_helpers_1.showInvisibles(deleteText),
            insertCode: prettier_linter_helpers_1.showInvisibles(insertText),
        },
        loc: { start, end },
        fix(fixer) {
            return fixer.replaceTextRange(range, insertText);
        },
    });
};
exports.reportReplace = reportReplace;
