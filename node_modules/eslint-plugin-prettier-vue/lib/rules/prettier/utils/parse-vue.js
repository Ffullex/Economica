"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVue = void 0;
const path = require("path");
const compiler_sfc_1 = require("@vue/compiler-sfc");
const processSFCBlock = ({ content, lang, loc, type, }) => {
    if (['template', 'script', 'style'].includes(type)) {
        const startingTag = `<${type}${lang ? ` lang="${lang}"` : ''}>`;
        const endingTag = `</${type}>\n`;
        const source = `${startingTag}${content}${endingTag}`;
        const offset = loc.start.offset - startingTag.length;
        return { source, offset, lang: 'vue', type };
    }
    const source = content.replace(/^\n/, '');
    const offset = loc.start.offset + 1;
    return { source, offset, lang: lang || 'vue', type };
};
const parseVue = ({ source, filepath, options, }) => {
    const SFCBlocksOptions = {
        template: options.template !== false,
        script: options.script !== false,
        style: options.style !== false,
    };
    const SFCCustomBlocksOptions = options.customBlocks || {};
    const { descriptor: { template, script, styles, customBlocks }, } = compiler_sfc_1.parse(source, {
        filename: path.basename(filepath),
        pad: false,
    });
    const SFCBlocks = [template, script, ...styles]
        .filter((block) => block !== null)
        .filter(({ type }) => SFCBlocksOptions[type]);
    const SFCCustomBlocks = customBlocks
        .filter(({ type }) => Object.keys(SFCCustomBlocksOptions).includes(type) &&
        SFCCustomBlocksOptions[type] !== false)
        .map((block) => {
        const customBlockOptions = SFCCustomBlocksOptions[block.type];
        if (typeof block.attrs.lang === 'string') {
            block.lang = block.attrs.lang;
        }
        else if (customBlockOptions !== false) {
            block.lang = customBlockOptions.lang;
        }
        return block;
    });
    return [...SFCBlocks, ...SFCCustomBlocks].map((block) => processSFCBlock(block));
};
exports.parseVue = parseVue;
