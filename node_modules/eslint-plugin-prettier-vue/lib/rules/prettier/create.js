"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const prettier = require("prettier");
const prettier_differences_1 = require("./utils/prettier-differences");
const parse_vue_1 = require("./utils/parse-vue");
const create = (context) => {
    const sharedSettings = context.settings['prettier-vue'] || {};
    const pluginOptions = {
        prettierOptions: context.options[0] || {},
        usePrettierrc: sharedSettings.usePrettierrc !== false,
        fileInfoOptions: sharedSettings.fileInfoOptions || {},
        SFCBlocksOptions: sharedSettings.SFCBlocks || {},
    };
    const filepath = context.getFilename();
    const fileInfoOptions = {
        resolveConfig: true,
        ignorePath: '.prettierignore',
        ...pluginOptions.fileInfoOptions,
    };
    const { ignored, inferredParser } = prettier.getFileInfo.sync(filepath, fileInfoOptions);
    if (ignored) {
        return {};
    }
    if (pluginOptions.usePrettierrc && prettier && prettier.clearConfigCache) {
        prettier.clearConfigCache();
    }
    const prettierRcOptions = pluginOptions.usePrettierrc
        ? prettier.resolveConfig.sync(filepath, {
            editorconfig: true,
        })
        : null;
    const prettierOptions = {
        ...prettierRcOptions,
        ...pluginOptions.prettierOptions,
        filepath,
    };
    const sourceCode = context.getSourceCode().text;
    return {
        Program() {
            if (filepath.endsWith('.vue')) {
                const SFCBlocks = parse_vue_1.parseVue({
                    source: sourceCode,
                    filepath,
                    options: pluginOptions.SFCBlocksOptions,
                });
                SFCBlocks.forEach(({ source, offset, lang, type }) => {
                    const fakeFilePath = `${filepath}.${type}.${lang}`;
                    prettier_differences_1.prettierDifferences({
                        context,
                        source,
                        options: { ...prettierOptions, filepath: fakeFilePath },
                        offset,
                    });
                });
            }
            else {
                const initialOptions = {};
                const parserBlockList = [null, 'graphql', 'markdown', 'html'];
                if (parserBlockList.includes(inferredParser)) {
                    initialOptions.parser = 'babel';
                }
                prettier_differences_1.prettierDifferences({
                    context,
                    source: sourceCode,
                    options: { ...initialOptions, ...prettierOptions },
                });
            }
        },
    };
};
exports.create = create;
